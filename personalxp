Experiences while developing FerryLeaks and writing a bachelor's thesis
=======================================================================

1. Why FerryLeaks
-----------------

During the first two months of my hiwi job at the database group I was
introduced to the Google Web Toolkit by George Georgidze. When hearing 
about its ability to cross-compile Java to Javascript I was sceptical
at first. Having always been an advocate of solid ground work by means of
developing _everything_ by hand without even the slightest help of an IDE
I instantly thought that GWT would produce bloated, buggy pieces of 
JavaScript code. 

However, while coding the NumberLineGame and other learning games that
required fast reaction times, I was pleased with how well GWT created
application were running on almost every browser. With GWT, JavaScript 
could do refreshment calls (for example for moving an enemy pointer
on the screen) with rates bigger than 40ms (!) without noticing any
browser freezes.

I instantly thought of making the development of the learning games
my bachelor thesis somehow. However, with the ongoing of March and April,
I noticed that a) someone was already doing a bachelors thesis on it and
b) that I lacked the psychological and educational insight to write about
a learning game. So, I suspended my decision, waiting for a better topic
to come up.

Luckily I was browsing the database group site one day in April and stumbled
over a topic requiring to create a web application. I remember that the
original proposal for doing it was Haskell, but I immediatly thought of doing
it with GWT on a JavaScript-only basis, without using any additional browser
plugins like flash or sth. like that.

I wrote an email to Manuel Mayr asking to work on that topic and got an instant
answer telling me that it was still free. I had made very positive experiences 
with the database group. Next to my job as a hiwi, I was part of the team 
developing the SASL compiler (with Jan Rittinger as a supervisoer) in summer
2010, and I recalled learning a lot back then. So I took the topic.

2. Developing FerryLeaks
------------------------

I had completely no idea how the formalities were with bachelor thesises. I 
was a bit surprised when Jeroen asked me to write a 7 page outline of the
project and couldn't see the meaning of it, but looking back it helped me a lot
to comprehend what I was doing, why I was doing it and how I was planning to do it.

It was quite difficult and very often frustrating to get the work started. In the
beginning, nothing worked. I had a look at many libraries for node drawing, but they 
all were more or less restricted in some way or provided bad usability. I was not
happy with them at all. Additionally, I didn't want to dig into a library and later do
tedious plumbing to make it do what i wanted. So, i decided to do the graph drawing
by myself using a simple graphical library. Looking back, that was argueably the best
decision i could have made, in spite of the additional workload. 

Once I got into it, developing the application actually was fun. Seeing the editor
grow to a professional tool with an almost desktop-like usabilty was very pleasing. One
of the biggest drawbacks of the development time was the discovery of the XML schema
language XSD to describe XML formats. I just had never heard of it, and so I
created a schema language to describe the XML plans by myself, including a parser using
them as an input on how to parse plans. I guess using XSD could have saved my some time
and work, since there are ready-to-go parsers with XSD compatibilty availabe for Java.

Despite this, I never had real time problems while developing the application. I was
a bit concerned at the beginning of the term since I had to attend a few classes, write
2 papers for seminars and hold 2 presentations in addition to the bachelor thesis and
2 jobs, but it eventually all worked out quite well. New stress came up after deciding to
continue studying in Freiburg, but even this went the way i'd hoped for.

Looking back over the development time, I think that one of the biggest mistakes was to
not clearly state what I wanted to do in terms of a solid class diagramm. I had to
"invent" the architecture on the way. This led to massive refactorings, deletion and
rewriting of code and of course to some frustrating moments. 

FerryLeaks was to biggest software project I ever developed. I think I learned a lot
from doing it. I would definitly choose this topic again.

3. Writing the thesis
=====================

has to wait until it is finshed...
